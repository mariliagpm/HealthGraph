<?php

namespace HealthGraph\Tests;

use HealthGraph\Authorization;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-11-29 at 20:49:08.
 */
class AuthorizationTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Authorization
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if ($GLOBALS['client_id'] == '') {
            $this->client_id = substr(md5(uniqid('nonce_', true)), 0, 32);
        } else {
            $this->client_id = $GLOBALS['client_id'];
        }
        if ($GLOBALS['client_secret'] == '') {
            $this->client_secret = substr(md5(uniqid('nonce_', true)), 0, 32);
        } else {
            $this->client_secret = $GLOBALS['client_secret'];
        }
        $this->authorization_code = substr(md5(uniqid('nonce_', true)), 0, 32);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers HealthGraph\Authorization::getAuthorizationButton
     */
    public function testGetAuthorizationButton()
    {
        $button = Authorization::getAuthorizationButton($this->client_id, 'redirect');
//    $button = $this->object->getAuthorizationButton($this->client_id, 'redirect');
        $this->assertEquals("http://static1.runkeeper.com/images/assets/connect-blue-white-200x38.png", $button['image']);
        $this->assertContains('<a href', $button['html']);
        $this->assertContains('<img', $button['html']);

        $button = Authorization::getAuthorizationButton($this->client_id, 'redirect', '', 'login', 'black', 'black', 300);
        $this->assertEquals("http://static1.runkeeper.com/images/assets/login-black-black-300x57.png", $button['image']);

        $button = Authorization::getAuthorizationButton($this->client_id, 'redirect', '', 'login', 'grey', 'white', 600);
        $this->assertEquals("http://static1.runkeeper.com/images/assets/login-grey-white-600x114.png", $button['image']);

        $button = Authorization::getAuthorizationButton($this->client_id, 'redirect', '', 'foo', 'foo', 'foo', 'foo');
        $this->assertEquals("http://static1.runkeeper.com/images/assets/connect-blue-white-200x38.png", $button['image']);
    }

    /**
     * @covers HealthGraph\Authorization::getAuthorizationLink
     */
    public function testGetAuthorizationLink()
    {
        $link = Authorization::getAuthorizationLink($this->client_id, 'redirect');
        $this->assertEquals("https://runkeeper.com/apps/authorize?client_id=" . $this->client_id . "&response_type=code&redirect_uri=redirect&state=", $link);

        $link = Authorization::getAuthorizationLink($this->client_id, 'redirect', NULL);
        $this->assertEquals("https://runkeeper.com/apps/authorize?client_id=" . $this->client_id . "&response_type=code&redirect_uri=redirect&state=", $link);

        $link = Authorization::getAuthorizationLink($this->client_id, 'redirect', '');
        $this->assertEquals("https://runkeeper.com/apps/authorize?client_id=" . $this->client_id . "&response_type=code&redirect_uri=redirect&state=", $link);

        $link = Authorization::getAuthorizationLink($this->client_id, 'redirect', 'test');
        $this->assertEquals("https://runkeeper.com/apps/authorize?client_id=" . $this->client_id . "&response_type=code&redirect_uri=redirect&state=test", $link);

        $link = Authorization::getAuthorizationLink('example', 'example', 'example', 'http://example.com');
        $this->assertEquals("http://example.com?client_id=example&response_type=code&redirect_uri=example&state=example", $link);
    }

    /**
     * @covers HealthGraph\Authorization::authorize
     * @todo   Implement better testAuthorize().
     */
    public function testAuthorize()
    {
        $token = Authorization::authorize($this->authorization_code, $this->client_id, $this->client_secret, $GLOBALS['redirect_url']);
        $this->assertFalse($token);
    }

    /**
     * @covers HealthGraph\Authorization::deauthorize
     * @todo   Implement better testDeauthorize().
     */
    public function testDeauthorize()
    {
        $auth = new Authorization();
        $result = $auth->deauthorize($this->authorization_code);
        $this->assertTrue($result);
    }

}
